use fast_pool_allocator when dealing with containers such as std::list
use pool_allocator when dealing with containers such as std::vector
http://www.boost.org/doc/libs/1_48_0/libs/pool/doc/html/boost/fast_pool_allocator.html

#define private friend class Hack; private
Notes:
If class Hack and target class are from different namespaces,
then class Hack must be declared before target class definition,
and class name in friend-statement should be prepended  with namespaces

Static linking with compiler libs:
Project Settings->Configuration Settings->C/C++->Code Generation:
Runtime Library := Multi-threaded (/MT)

Specialization:
    template<> class vector<bool>
Partial specialization:
    template <class T> void swap(vector<T>&, vector<T>&);

Stepanov:
    http://www.sgi.com/tech/stl/drdobbs-interview.html

FAQ:
     http://www.parashift.com/c++-faq-lite/
FQA:
    http://yosefk.com/c++fqa/

Concepts are likely to be presented by keyword "typename"
(parameters of templates or new types, created by template code)
used as type replacements for compile-time duck typing.
    http://en.wikipedia.org/wiki/Concept_(generic_programming)
    http://en.wikipedia.org/wiki/Concepts_(C++)
    http://www.boost.org/doc/libs/1_50_0/libs/concept_check/concept_check.htm

logical_cast:
    throws for references
    returns 0 for pointers

Caller graphs and profiling:
    valgrind --tool=callgrind
    kcachegrind for view

Programs with type errors will not even compile, much less run.

Rule of Three: http://stackoverflow.com/a/4172724
If you need to explicitly declare either the destructor,
copy constructor or copy assignment operator yourself,
you probably need to explicitly declare all three of them.

Rule of 4, 5: http://stackoverflow.com/a/4782927

A a1;
A a2 = a; // calls copy constructor, not assignment operator!

Matching against the function or method signature:

    #include <string>
    #include <iostream>

    struct C {
        double b(std::string a) {
            return 2.5;
        }
    };

    template<typename C, typename G, typename F>
    struct Wrapper {
    public:
        typedef G (C::*M) (F);

        template<M m>
        struct Inner {
            G operator()(C& r, F f) {
                return ((&r)->*m)(f);
            }
        };
    };

    Wrapper<C, double, std::string>::Inner<&C::b> w;
    double res = w (c, "A”);

http://lua.2524044.n2.nabble.com/C-14-Wrapper-tp7668242p7668245.html

How to fix the following error (autotools):
    /usr/include/c++/4.6/cstdlib:119:11: error: ‘::malloc’ has not been declared
$ ac_cv_func_malloc_0_nonnull=yes ./configure ...
https://stackoverflow.com/questions/14691089/

Integer conversion rules:
https://www.securecoding.cert.org/confluence/display/cplusplus/INT02-CPP.+Understand+integer+conversion+rules

Null Pointer Dereferencing Causes Undefined Behavior:
https://software.intel.com/en-us/blogs/2015/04/20/null-pointer-dereferencing-causes-undefined-behavior

inline namespace: http://stackoverflow.com/a/11018418

Operators which cannot be overloaded
  * ?: (conditional)
  * . (member selection)
  * .* (member selection with pointer-to-member)
  * :: (scope resolution)
  * sizeof (object size information)
  * typeid (object type information)
https://en.wikibooks.org/wiki/C%2B%2B_Programming/Operators/Operator_Overloading#Operators_which_cannot_be_overloaded
